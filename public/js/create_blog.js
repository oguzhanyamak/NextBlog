import imagePreviewFunc from "./utils/imagePreview.js"; // Resim Ã¶nizleme iÅŸlevi
import Snackbar from "./snackbar.js"; // Bildirim gÃ¶stermek iÃ§in kullanÄ±lan bileÅŸen
import config from "./config.js"; // YapÄ±landÄ±rma ayarlarÄ± (Ã¶r. maksimum dosya boyutu)
import imageAsDataURL from "./utils/imageAsDataUrl.js"; // GÃ¶rseli Base64 formatÄ±na dÃ¶nÃ¼ÅŸtÃ¼rme iÅŸlevi

// ğŸ“Œ GÃ¶rsel SeÃ§me & Ã–nizleme AlanlarÄ±nÄ± SeÃ§
const imageField = document.querySelector("[data-image-field]"); // GÃ¶rsel yÃ¼kleme input'u
const imagePreview = document.querySelector("[data-image-preview]"); // Ã–nizleme alanÄ±
const imagePreviewClear = document.querySelector("[data-image-preview-clear]"); // Ã–nizlemeyi temizleme butonu

// ğŸ“Œ GÃ¶rsel YÃ¼klendiÄŸinde Ã–nizleme Fonksiyonunu Ã‡alÄ±ÅŸtÄ±r
imageField.addEventListener("change", () => {
  imagePreviewFunc(imageField, imagePreview);
});

// ğŸ“Œ Ã–nizlemeyi Temizleme Ä°ÅŸlevi
const clearImagePreview = function () {
  imagePreview.classList.remove("show"); // Ã–nizleme alanÄ±nÄ± gizle
  imagePreview.innerHTML = ""; // Ä°Ã§eriÄŸi temizle
};

// ğŸ“Œ Ã–nizlemeyi Temizleme Butonuna Olay Dinleyicisi Ekle
imagePreviewClear.addEventListener("click", clearImagePreview);

// ğŸ“Œ Blog YayÄ±nlama Ä°ÅŸlemi

const blogForm = document.querySelector("[data-form]"); // Form elemanÄ±
const publishBtn = document.querySelector("[data-publish-btn]"); // YayÄ±nla butonu
const progressBar = document.querySelector("[data-progress-bar]"); // YÃ¼kleme Ã§ubuÄŸu

/**
 * Blog yayÄ±nlama iÅŸlevi
 * @param {Event} event - Formun gÃ¶nderme olayÄ±
 */
const handlePublishBlog = async function (event) {
  event.preventDefault(); // SayfanÄ±n yeniden yÃ¼klenmesini engelle

  publishBtn.setAttribute("disabled", ""); // Ã‡ift tÄ±klamaya karÅŸÄ± butonu devre dÄ±ÅŸÄ± bÄ±rak

  // Formdaki verileri almak iÃ§in FormData nesnesi oluÅŸtur
  const formData = new FormData(blogForm);

  // ğŸ“Œ KullanÄ±cÄ± herhangi bir banner resmi yÃ¼klemediyse hata ver
  if (!formData.get("banner").size) {
    publishBtn.removeAttribute("disabled"); // Butonu tekrar etkinleÅŸtir
    Snackbar({
      type: "error",
      message: "You didn't select any image for blog banner.", // Hata mesajÄ±
    });
    return;
  }

  // ğŸ“Œ SeÃ§ilen resmin boyutu 5MB'tan bÃ¼yÃ¼kse hata ver
  if (formData.get("banner").size > config.blogBanner.maxByteSize) {
    publishBtn.removeAttribute("disabled"); // Butonu tekrar etkinleÅŸtir
    Snackbar({
      type: "error",
      message: "Image should be less than 5MB.", // Hata mesajÄ±
    });
    return;
  }

  // ğŸ“Œ GÃ¶rseli Base64 formatÄ±na dÃ¶nÃ¼ÅŸtÃ¼r ve FormData'ya ekle
  formData.set("banner", await imageAsDataURL(formData.get("banner")));

  // ğŸ“Œ FormData'yÄ± JSON formatÄ±na Ã§evir
  const body = Object.fromEntries(formData.entries());

  // ğŸ“Œ YÃ¼kleme Ã§ubuÄŸunu gÃ¶ster
  progressBar.classList.add("loading");

  // ğŸ“Œ Blog verisini sunucuya gÃ¶nder
  const response = await fetch(`${window.location.origin}/createblog`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(body),
  });

  // ğŸ“Œ BaÅŸarÄ±lÄ± yanÄ±t durumu (Blog oluÅŸturuldu)
  if (response.ok) {
    Snackbar({ message: "Your blog has been created." }); // BaÅŸarÄ± mesajÄ± gÃ¶ster
    progressBar.classList.add("loading-end"); // YÃ¼kleme animasyonunu durdur
    return (window.location = response.url); // KullanÄ±cÄ±yÄ± yeni blog sayfasÄ±na yÃ¶nlendir
  }

  // ğŸ“Œ Hata durumu (400 - GeÃ§ersiz istek)
  if (response.status === 400) {
    publishBtn.removeAttribute("disabled"); // Butonu tekrar etkinleÅŸtir
    progressBar.classList.add("loading-end"); // YÃ¼kleme animasyonunu durdur
    const { message } = await response.json(); // YanÄ±ttan hata mesajÄ±nÄ± al
    Snackbar({
      type: "error",
      message, // KullanÄ±cÄ±ya hata mesajÄ±nÄ± gÃ¶ster
    });
  }
};

// ğŸ“Œ Form gÃ¶nderildiÄŸinde handlePublishBlog fonksiyonunu Ã§alÄ±ÅŸtÄ±r
blogForm.addEventListener("submit", handlePublishBlog);
